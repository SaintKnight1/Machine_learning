import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import f1_score

# Путь к загруженному файлу
file_path = r'C:\Users\glebk\Documents\Data.csv'

# Загрузка данных
data = pd.read_csv(file_path)

# Просмотр первых строк таблицы
data.head(), data.info()

# Преобразуем столбцы
# Преобразуем потребление в числовой формат
data['Текущее потребление, Гкал'] = data['Текущее потребление, Гкал'].str.replace(',', '.').astype(float)

# Преобразуем столбец с датой в формат datetime
data['Дата текущего показания'] = pd.to_datetime(data['Дата текущего показания'], errors='coerce')

# Обработка пропусков
# Уберем строки с пропущенными датами и потреблением
data_clean = data.dropna(subset=['Дата текущего показания', 'Текущее потребление, Гкал'])

# Преобразуем данные для корректной работы
data_clean.info(), data_clean.head()


# Добавим признак "Отопительный период" (октябрь-апрель)
data_clean['Отопительный период'] = data_clean['Дата текущего показания'].dt.month.isin([10, 11, 12, 1, 2, 3, 4])

# Сортировка данных по объекту и дате
data_clean = data_clean.sort_values(by=['№ ОДПУ', 'Дата текущего показания'])

# Вычислим изменение потребления по сравнению с предыдущим месяцем
data_clean['Изменение потребления (%)'] = data_clean.groupby('№ ОДПУ')['Текущее потребление, Гкал'].pct_change() * 100

# Отметим аномалии по следующим правилам:
# 1. Нулевое потребление в отопительный период
data_clean['Аномалия 1 (Нулевое в отоплении)'] = (data_clean['Текущее потребление, Гкал'] == 0) & data_clean['Отопительный период']

# 2. Равные значения показаний в течение нескольких расчетных периодов
data_clean['Аномалия 2 (Равные показания)'] = data_clean.groupby('№ ОДПУ')['Текущее потребление, Гкал'].transform(lambda x: x.duplicated(keep=False))

# 3. Изменение потребления на ±15%
data_clean['Аномалия 3 (Изменение на 15%)'] = data_clean['Изменение потребления (%)'].abs() > 15

# Для упрощения, пока не добавляем правило по аналогичным объектам
# Визуализируем обновленные данные
data_clean[['№ ОДПУ', 'Дата текущего показания', 'Текущее потребление, Гкал', 'Отопительный период', 'Изменение потребления (%)',
            'Аномалия 1 (Нулевое в отоплении)', 'Аномалия 2 (Равные показания)', 'Аномалия 3 (Изменение на 15%)']].head()




# Создадим целевую переменную (метка аномалии)
data_clean['Аномалия'] = data_clean[['Аномалия 1 (Нулевое в отоплении)', 'Аномалия 2 (Равные показания)', 'Аномалия 3 (Изменение на 15%)']].any(axis=1).astype(int)

# Для упрощения возьмем числовые признаки
X = data_clean[['Текущее потребление, Гкал', 'Изменение потребления (%)']]
y = data_clean['Аномалия']

# Заменим NaN на 0 в признаке изменения потребления
X['Изменение потребления (%)'] = X['Изменение потребления (%)'].fillna(0)

# Разделение на обучающую и тестовую выборки
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Обучим модель Random Forest
model = RandomForestClassifier(random_state=42)
model.fit(X_train, y_train)

# Предсказания
y_pred = model.predict(X_test)

# Вычисление F-score
f1 = f1_score(y_test, y_pred)

print(f'F-score = {f1}')
